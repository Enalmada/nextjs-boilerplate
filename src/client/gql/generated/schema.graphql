interface BaseEntity {
  createdAt: DateTime!
  createdBy: User
  id: ID!
  updatedAt: DateTime
  updatedBy: User
  version: Int!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

scalar File

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The query mutation type."""
type Mutation {
  createTask(input: MutationCreateTaskInput!): Task!
  deleteTask(id: ID!): Task
  deleteUser(id: ID!): User
  publishNotification(input: MutationPublishNotificationInput!): NotificationResponse
  updateTask(id: ID!, input: MutationUpdateTaskInput!): Task
  updateUser(id: ID!, input: MutationUpdateUserInput!): User
  uploadFile(file: File!): UploadResponse!
}

input MutationCreateTaskInput {
  description: String
  dueDate: DateTime
  status: TaskStatus!
  title: NonEmptyString!
}

input MutationPublishNotificationInput {
  message: String
}

input MutationUpdateTaskInput {
  description: String
  dueDate: DateTime
  status: TaskStatus!
  title: NonEmptyString!
  version: Int!
}

input MutationUpdateUserInput {
  role: UserRole!
  version: Int!
}

"""A string that cannot be passed as an empty value"""
scalar NonEmptyString

"""When a notification is posted"""
type NotificationEvent {
  id: ID!

  """Notification message"""
  message: String!

  """Notification type"""
  type: NotificationEventType!
}

enum NotificationEventType {
  SystemNotification
}

type NotificationResponse {
  published: Boolean!
}

input OrderInput {
  sortBy: String!
  sortOrder: SortOrder!
}

input PaginationInput {
  page: Int!
  pageSize: Int!
}

"""The query root type."""
type Query {
  me: User
  task(id: ID!): Task
  tasksPage(input: QueryTasksPageInput!): TaskPage!
  user(id: ID!): User
  usersPage(input: QueryUsersPageInput!): UserPage!
}

input QueryTasksPageInput {
  order: OrderInput
  pagination: PaginationInput
  where: TaskWhere
}

input QueryUsersPageInput {
  order: OrderInput
  pagination: PaginationInput
  where: UserWhere
}

enum SortOrder {
  ASC
  DESC
}

"""The query subscription type."""
type Subscription {
  """Events related to notifications"""
  notificationEvents: NotificationEvent!
}

type Task implements BaseEntity {
  createdAt: DateTime!
  createdBy: User
  description: String
  dueDate: DateTime
  id: ID!
  status: TaskStatus!
  title: NonEmptyString!
  updatedAt: DateTime
  updatedBy: User
  version: Int!
}

"""Type used for querying paginated tasks"""
type TaskPage {
  hasMore: Boolean!
  tasks: [Task!]!
}

enum TaskStatus {
  ACTIVE
  COMPLETED
}

input TaskWhere {
  id: String
  title: String
}

type UploadResponse {
  filename: String!
}

type User implements BaseEntity {
  createdAt: DateTime!
  createdBy: User
  email: String
  id: ID!
  name: String
  role: UserRole!
  rules: JSON
  tasks: [Task!]
  updatedAt: DateTime
  updatedBy: User
  version: Int!
}

"""Type used for querying paginated users"""
type UserPage {
  hasMore: Boolean!
  users: [User!]!
}

enum UserRole {
  ADMIN
  MEMBER
}

input UserWhere {
  email: String
  id: String
}